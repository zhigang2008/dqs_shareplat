<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="BoreholeStrain">

	<resultMap id="RM.BoreholeStrain" type="com.dqs.biz.model.BoreholeStrain">
        <result property="stationId" column="STATION_ID"/>
        <result property="observeTime" column="OBSERVE_TIME"/>
        <result property="observeValue" column="OBSERVE_VALUE"/>
        <result property="colYear" column="COL_YEAR"/>
        <result property="tableName" column="TABLE_NAME"/>
        <result property="columnName" column="COLUMN_NAME"/>
	</resultMap>
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="BoreholeStrain.insert" >
    <![CDATA[
        INSERT INTO ${tableName} (
        	STATION_ID ,
        	DATE_OBSV ,
        	${columnName} ,
        	COL_YEAR  
        ) VALUES (
        	#{stationId,jdbcType=DECIMAL} ,
        	to_date(#{observeTimeString,jdbcType=VARCHAR},'yyyy-MM-dd:HH24') ,
        	#{observeValue,jdbcType=DECIMAL} ,
        	#{colYear,jdbcType=VARCHAR} 
        )
    ]]>
	</insert>
    
	<update id="BoreholeStrain.update" >
    <![CDATA[
        UPDATE ${tableName} SET
	        STATION_ID = #{stationId,jdbcType=DECIMAL} ,
	        ${columnName} = #{observeValue,jdbcType=DECIMAL} ,
	        COL_YEAR = #{colYear,jdbcType=VARCHAR} 
        WHERE 
	        DATE_OBSV = to_date(#{observeTimeString,jdbcType=VARCHAR},'yyyy-MM-dd:HH24') 
    ]]>
	</update>

    <delete id="BoreholeStrain.delete">
    <![CDATA[
        DELETE FROM ${tableName} WHERE
        DATE_OBSV = to_date(#{observeTimeString,jdbcType=VARCHAR},'yyyy-MM-dd:HH24') 
    ]]>
    </delete>
    
    <select id="BoreholeStrain.getById" resultMap="RM.BoreholeStrain">
		SELECT STATION_ID ,	DATE_OBSV OBSERVE_TIME, ${columnName} OBSERVE_VALUE, COL_YEAR  
	    <![CDATA[
		    FROM ${tableName} 
	        WHERE 
		        DATE_OBSV = to_date(#{observeTimeString,jdbcType=VARCHAR},'yyyy-MM-dd:HH24') 
	    ]]>
	</select>
	
	<sql id="BoreholeStrain.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(stationId)">
				AND STATION_ID = #{stationId}
			</if>
	       <if test="@Ognl@isNotEmpty(observeTimeBegin)">
				AND DATE_OBSV >= #{observeTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(observeTimeEnd)">
				AND DATE_OBSV &lt; #{observeTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(observeValue)">
				AND ${columnName} = #{observeValue}
			</if>
	       <if test="@Ognl@isNotEmpty(colYear)">
				AND rtrim(ltrim(COL_YEAR)) = #{colYear}
			</if>
		</where>
	</sql>
		
    <select id="BoreholeStrain.findPage.count" resultType="long">
        SELECT count(*) FROM ${tableName}  
		<include refid="BoreholeStrain.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="BoreholeStrain.findPage" resultMap="RM.BoreholeStrain">
    	SELECT STATION_ID ,	DATE_OBSV OBSERVE_TIME, ${columnName} OBSERVE_VALUE, COL_YEAR
	    FROM ${tableName}  
		<include refid="BoreholeStrain.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

<!-- 计算值 -->
     <select id="BoreholeStrain.getCalcValue" resultType="java.util.HashMap">
    	SELECT  count(${columnName}) amount,NVL(MIN(${columnName}),0) minValue,NVL(MAX(${columnName}),0) maxValue,NVL(AVG(${columnName}),0) avgVAlue,NVL(STDDEV(${columnName}),0) stdValue,NVL(VARIANCE(${columnName}),0) variValue 
	    FROM ${tableName}  
		<include refid="BoreholeStrain.findPage.where"/>
    </select>
	
</mapper>

