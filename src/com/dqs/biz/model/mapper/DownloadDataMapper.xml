<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="DownloadData">

	<resultMap id="RM.DownloadData" type="com.dqs.biz.model.DownloadData">
        <result property="fileCatalog" column="FILE_CATALOG"/>
        <result property="fileName" column="FILE_NAME"/>
        <result property="downloadCount" column="DOWNLOAD_COUNT"/>
        <result property="updateTime" column="UPDATE_TIME"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="DownloadData.columns">
	    <![CDATA[
		FILE_CATALOG,FILE_NAME,DOWNLOAD_COUNT,UPDATE_TIME
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="DownloadData.insert" >
    <![CDATA[
        INSERT INTO T_DOWNLOAD_DATA (
        	FILE_CATALOG ,
        	FILE_NAME ,
        	DOWNLOAD_COUNT ,
        	UPDATE_TIME 
        ) VALUES (
        	#{fileCatalog,jdbcType=VARCHAR} ,
        	#{fileName,jdbcType=VARCHAR} ,
        	#{downloadCount,jdbcType=DECIMAL} ,
        	#{updateTime,jdbcType=TIMESTAMP} 
        )
    ]]>
		
	</insert>
    
	<update id="DownloadData.update" >
    <![CDATA[
        UPDATE T_DOWNLOAD_DATA SET
	        DOWNLOAD_COUNT = #{downloadCount,jdbcType=DECIMAL} ,
	        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP} 
        WHERE 
	        FILE_CATALOG = #{fileCatalog}  AND 
	        FILE_NAME = #{fileName} 
    ]]>
	</update>

    <delete id="DownloadData.deleteByModel">
    <![CDATA[
        DELETE FROM T_DOWNLOAD_DATA WHERE
        FILE_CATALOG = #{fileCatalog}  AND 
        FILE_NAME = #{fileName} 
    ]]>
    </delete>
    
    <select id="DownloadData.getByModel" resultMap="RM.DownloadData">
		SELECT <include refid="DownloadData.columns" />
	    <![CDATA[
		    FROM T_DOWNLOAD_DATA 
	        WHERE 
		        FILE_CATALOG = #{fileCatalog}  AND 
		        FILE_NAME = #{fileName} 
	    ]]>
	</select>
	<!-- 不建议,仅提供给数据量较少的基表查询 -->
	 <select id="DownloadData.findAll" resultMap="RM.DownloadData">
		SELECT <include refid="DownloadData.columns" />
	    <![CDATA[
		    FROM T_DOWNLOAD_DATA 
	    ]]>
	</select>
	<!-- 基础代码,视情况添加状态识别 -->
	 <select id="DownloadData.baseCode" resultMap="RM.DownloadData">
		SELECT <include refid="DownloadData.columns" />
	    <![CDATA[
		    FROM T_DOWNLOAD_DATA 
	    ]]>
	    <!-- 视情况添加where条件 -->
	</select>
	
	<sql id="DownloadData.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(fileCatalog)">
				AND FILE_CATALOG like '%'||#{fileCatalog}||'%' 
			</if>
	       <if test="@Ognl@isNotEmpty(fileName)">
				AND FILE_NAME like '%'||#{fileName}||'%' 
			</if>
	       <if test="@Ognl@isNotEmpty(downloadCount)">
				AND DOWNLOAD_COUNT = #{downloadCount}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND UPDATE_TIME >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND UPDATE_TIME &lt;= #{updateTimeEnd}
		   </if>
		</where>
	</sql>
		
    <select id="DownloadData.findPage.count" resultType="long">
        SELECT count(*) FROM T_DOWNLOAD_DATA 
		<include refid="DownloadData.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="DownloadData.findPage" resultMap="RM.DownloadData">
    	SELECT <include refid="DownloadData.columns" />
	    FROM T_DOWNLOAD_DATA 
		<include refid="DownloadData.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

