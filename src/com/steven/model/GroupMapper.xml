<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Group">

	<resultMap id="RM.Group" type="com.steven.core.model.Group">
        <result property="groupId" column="GROUP_ID"/>
        <result property="groupName" column="GROUP_NAME"/>
        <result property="groupDesc" column="GROUP_DESC"/>
        <result property="status" column="STATUS"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Group.columns">
	    <![CDATA[
		GROUP_ID,GROUP_NAME,GROUP_DESC,STATUS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Group.insert" >
    <![CDATA[
        INSERT INTO T_SYS_GROUP (
        	GROUP_ID ,
        	GROUP_NAME ,
        	GROUP_DESC ,
        	STATUS 
        ) VALUES (
        	#{groupId,jdbcType=INTEGER} ,
        	#{groupName,jdbcType=VARCHAR} ,
        	#{groupDesc,jdbcType=VARCHAR} ,
        	#{status,jdbcType=BIT} 
        )
    ]]>
		<!--oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL -->
			
		<selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="groupId">
			SELECT S_T_SYS_GROUP.nextval  FROM DUAL 
        </selectKey>
	</insert>
    
	<update id="Group.update" >
    <![CDATA[
        UPDATE T_SYS_GROUP SET
	        GROUP_NAME = #{groupName,jdbcType=VARCHAR} ,
	        GROUP_DESC = #{groupDesc,jdbcType=VARCHAR} ,
	        STATUS = #{status,jdbcType=BIT} 
        WHERE 
	        GROUP_ID = #{groupId} 
    ]]>
	</update>

    <delete id="Group.delete">
    <![CDATA[
        DELETE FROM T_SYS_GROUP WHERE
        GROUP_ID = #{id} 
    ]]>
    </delete>
    
    <select id="Group.getById" resultMap="RM.Group">
		SELECT <include refid="Group.columns" />
	    <![CDATA[
		    FROM T_SYS_GROUP 
	        WHERE 
		        GROUP_ID = #{id} 
	    ]]>
	</select>
	<!-- 不建议,仅提供给数据量较少的基表查询 -->
	 <select id="Group.findAll" resultMap="RM.Group">
		SELECT <include refid="Group.columns" />
	    <![CDATA[
		    FROM T_SYS_GROUP 
	    ]]>
	</select>
		<!-- 基础代码,视情况添加状态识别 -->
	 <select id="Group.baseCode" resultMap="RM.Group">
		SELECT <include refid="Group.columns" />
	    <![CDATA[
		    FROM T_SYS_GROUP 
		    where status=1 
	    ]]>
	</select>
	<sql id="Group.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(groupId)">
				AND GROUP_ID = #{groupId}
			</if>
	       <if test="@Ognl@isNotEmpty(groupName)">
				AND GROUP_NAME = #{groupName}
			</if>
	       <if test="@Ognl@isNotEmpty(groupDesc)">
				AND GROUP_DESC = #{groupDesc}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
		</where>
	</sql>
		
    <select id="Group.findPage.count" resultType="long">
        SELECT count(*) FROM T_SYS_GROUP 
		<include refid="Group.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Group.findPage" resultMap="RM.Group">
    	SELECT <include refid="Group.columns" />
	    FROM T_SYS_GROUP 
		<include refid="Group.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

