<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Module">

	<resultMap id="RM.Module" type="com.steven.core.model.Module">
        <result property="moduleId" column="MODULE_ID"/>
        <result property="moduleName" column="MODULE_NAME"/>
        <result property="url" column="URL"/>
        <result property="parent" column="PARENT"/>
        <result property="status" column="STATUS"/>
        <result property="description" column="DESCRIPTION"/>
        <result property="sortOrder" column="SORT_ORDER"/>
        <result property="typeId" column="TYPE_ID"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Module.columns">
	    <![CDATA[
		MODULE_ID,MODULE_NAME,URL,PARENT,STATUS,DESCRIPTION,SORT_ORDER,TYPE_ID
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Module.insert" >
    <![CDATA[
        INSERT INTO T_SYS_MODULE (
        	MODULE_ID ,
        	MODULE_NAME ,
        	URL ,
        	PARENT ,
        	STATUS ,
        	DESCRIPTION ,
        	SORT_ORDER ,
        	TYPE_ID 
        ) VALUES (
        	#{moduleId,jdbcType=INTEGER} ,
        	#{moduleName,jdbcType=VARCHAR} ,
        	#{url,jdbcType=VARCHAR} ,
        	#{parent,jdbcType=INTEGER} ,
        	#{status,jdbcType=BIT} ,
        	#{description,jdbcType=VARCHAR} ,
        	#{sortOrder,jdbcType=INTEGER} ,
        	#{typeId,jdbcType=INTEGER} 
        )
    ]]>
		<!--oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL -->
			
		<selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="moduleId">
			SELECT S_T_SYS_MODULE.nextval  FROM DUAL 
        </selectKey>
	</insert>
    
	<update id="Module.update" >
    <![CDATA[
        UPDATE T_SYS_MODULE SET
	        MODULE_NAME = #{moduleName,jdbcType=VARCHAR} ,
	        URL = #{url,jdbcType=VARCHAR} ,
	        PARENT = #{parent,jdbcType=INTEGER} ,
	        STATUS = #{status,jdbcType=BIT} ,
	        DESCRIPTION = #{description,jdbcType=VARCHAR} ,
	        SORT_ORDER = #{sortOrder,jdbcType=INTEGER} ,
	        TYPE_ID = #{typeId,jdbcType=INTEGER} 
        WHERE 
	        MODULE_ID = #{moduleId} 
    ]]>
	</update>

    <delete id="Module.delete">
    <![CDATA[
        DELETE FROM T_SYS_MODULE WHERE
        MODULE_ID = #{id} 
    ]]>
    </delete>
    
    <select id="Module.getById" resultMap="RM.Module">
		SELECT <include refid="Module.columns" />
	    <![CDATA[
		    FROM T_SYS_MODULE 
	        WHERE 
		        MODULE_ID = #{id} 
	    ]]>
	</select>
	<!-- 不建议,仅提供给数据量较少的基表查询 -->
	 <select id="Module.findAll" resultMap="RM.Module">
		SELECT <include refid="Module.columns" />
	    <![CDATA[
		    FROM T_SYS_MODULE 
	    ]]>
	</select>
	<!-- 基础代码,视情况添加状态识别 -->
	 <select id="Module.baseCode" resultMap="RM.Module">
		SELECT <include refid="Module.columns" />
	    <![CDATA[
		    FROM T_SYS_MODULE 
	    ]]>
	    <!-- 视情况添加where条件 -->
	</select>
	
	<sql id="Module.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(moduleId)">
				AND MODULE_ID = #{moduleId}
			</if>
	       <if test="@Ognl@isNotEmpty(moduleName)">
				AND MODULE_NAME like '%'||#{moduleName}||'%'
			</if>
	       <if test="@Ognl@isNotEmpty(url)">
				AND URL = #{url}
			</if>
	       <if test="@Ognl@isNotEmpty(parent)">
				AND PARENT = #{parent}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(description)">
				AND DESCRIPTION = #{description}
			</if>
	       <if test="@Ognl@isNotEmpty(sortOrder)">
				AND SORT_ORDER = #{sortOrder}
			</if>
	       <if test="@Ognl@isNotEmpty(typeId)">
				AND TYPE_ID = #{typeId}
			</if>
		</where>
	</sql>
		
    <select id="Module.findPage.count" resultType="long">
        SELECT count(*) FROM T_SYS_MODULE 
		<include refid="Module.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Module.findPage" resultMap="RM.Module">
    	SELECT <include refid="Module.columns" />
	    FROM T_SYS_MODULE 
		<include refid="Module.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

