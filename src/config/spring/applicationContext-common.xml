<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
	default-lazy-init="true">
<!-- 
         该配置文件放置一些公共常用的Bean实现.例如密码加密器.验证码服务等
 -->
	<!-- 密码加密 -->
	<bean id="pwdEncoder" class="com.steven.framework.common.security.encoder.Md5PwdEncoder"/>	
		
    <!-- 验证码服务 begin -->
	<bean id="imageCaptchaService" class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">
		<constructor-arg index="0" ref="imageEngine"/>
		<constructor-arg type="int" index="1" value="180"/>
		<constructor-arg type="int" index="2" value="100000"/>
		<constructor-arg type="int" index="3" value="75000"/>
	</bean>
	<bean id="imageEngine" class="com.octo.captcha.engine.GenericCaptchaEngine">
		<constructor-arg index="0">
			<list>
				<ref bean="captchaFactory"/>
			</list>
		</constructor-arg>
	</bean>

	<bean id="captchaFactory" class="com.octo.captcha.image.gimpy.GimpyFactory">
		<constructor-arg>
			<ref bean="wordgen"/>
		</constructor-arg>
		<constructor-arg>
			<ref bean="wordtoimage"/>
		</constructor-arg>
	</bean>

	<bean id="wordgen" class= "com.octo.captcha.component.word.wordgenerator.RandomWordGenerator">		
		<!--可选字符-->
		<constructor-arg>
			<value>123456789</value>
		</constructor-arg>
	</bean>

	<bean id="wordtoimage" class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
		<constructor-arg index="0">
			<ref bean="fontGenRandom"/>
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="backGenUni"/>
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="decoratedPaster"/>
		</constructor-arg>
	</bean>

	<bean id="fontGenRandom" class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator">
		<!--最小字体-->
		<constructor-arg index="0">
			<value>18</value>
		</constructor-arg>
		<!--最大字体-->
		<constructor-arg index="1">
			<value>24</value>
		</constructor-arg>
		<constructor-arg index="2">
			<list>
				<bean class="java.awt.Font">
					<constructor-arg index="0"><value>Arial</value></constructor-arg>
					<constructor-arg index="1"><value>0</value></constructor-arg>
					<constructor-arg index="2"><value>32</value></constructor-arg>
				</bean>
			</list>
		</constructor-arg>
	</bean>
	<bean id="backGenUni" class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator">
		<!--背景宽度-->
		<constructor-arg index="0">
			<value>80</value>
		</constructor-arg>
		<!--背景高度-->
		<constructor-arg index="1">
			<value>35</value>
		</constructor-arg>
	</bean>

	<bean id="decoratedPaster" class="com.octo.captcha.component.image.textpaster.DecoratedRandomTextPaster">
		<!--最大字符长度-->
		<constructor-arg type="java.lang.Integer" index="0">
			<value>4</value>
		</constructor-arg>
		<!--最小字符长度-->
		<constructor-arg type="java.lang.Integer" index="1">
			<value>4</value>
		</constructor-arg>
		<!--文本颜色-->
		<constructor-arg index="2">
			<ref bean="colorGen"/>
		</constructor-arg>
		<!--文本混淆-->
		<constructor-arg index="3">
			<list>
				<!--<ref bean="baffleDecorator"/>-->
			</list>
		</constructor-arg>
	</bean>	
	<bean id="baffleDecorator" class="com.octo.captcha.component.image.textpaster.textdecorator.BaffleTextDecorator">
		<constructor-arg type="java.lang.Integer" index="0"><value>1</value></constructor-arg>
		<constructor-arg type="java.awt.Color" index="1"><ref bean="colorWrite"/></constructor-arg>
	</bean>
	<bean id="colorGen" class="com.octo.captcha.component.image.color.SingleColorGenerator">
		<constructor-arg type="java.awt.Color" index="0">
			<ref bean="colorBlack"/>
		</constructor-arg>
	</bean>
	<bean id="colorWrite" class="java.awt.Color">
		<constructor-arg type="int" index="0">
			<value>255</value>
		</constructor-arg>
		<constructor-arg type="int" index="1">
			<value>255</value>
		</constructor-arg>
		<constructor-arg type="int" index="2">
			<value>255</value>
		</constructor-arg>
	</bean>
	<bean id="colorBlack" class="java.awt.Color">
		<constructor-arg type="int" index="0">
			<value>50</value>
		</constructor-arg>
		<constructor-arg type="int" index="1">
			<value>50</value>
		</constructor-arg>
		<constructor-arg type="int" index="2">
			<value>50</value>
		</constructor-arg>
	</bean>
	<bean id="colorBlue" class="java.awt.Color">
		<constructor-arg type="int" index="0">
			<value>0</value>
		</constructor-arg>
		<constructor-arg type="int" index="1">
			<value>255</value>
		</constructor-arg>
		<constructor-arg type="int" index="2">
			<value>0</value>
		</constructor-arg>
	</bean>
	<!-- 验证码服务 end -->
	
	<!-- 全局基础代码类 -->
	<bean id="globalCodeTable" class="com.steven.framework.common.codetable.GlobalCodeTable"/>
	
	<!-- 异步发送邮件 -->
	<!-- 邮件消息模板,指定一些邮件的默认值 -->
	<bean id="simpleMailMessageTemplate" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="china_dqs@163.com"></property>
	</bean>
	
	<!-- 异步的邮件发送器 -->
	<bean id="asyncJavaMailSender" class="com.steven.framework.common.mail.AsyncJavaMailSender">
		<!-- 邮件发送的线程池大小 -->
		<property name="sendMailThreadPoolSize" value="10" />
		<property name="javaMailSender" ref="javaMailSender" />
		<property name="asyncTokenFactory" ref="mailerAsyncTokenFactory"></property>
	</bean>

	<!-- AsyncTokenFactory可以为AsyncToken指定默认的responders -->
	<bean id="mailerAsyncTokenFactory"
		class="com.steven.framework.util.concurrent.async.DefaultAsyncTokenFactory">
		<property name="responders">
			<list></list>
		</property>
	</bean>

	<!-- freemarker模板相关配置-->
	<bean id="freemarkerTemplateProcessor"
		class="com.steven.framework.core.freemarker.FreemarkerTemplateProcessor">
		<property name="configuration">
			<bean
				class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
				<property name="templateLoaderPath" value="classpath:/template/mail" />
				<property name="defaultEncoding" value="UTF-8" />
			</bean>
		</property>
	</bean>
        
</beans>