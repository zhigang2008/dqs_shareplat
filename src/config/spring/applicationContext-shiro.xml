<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util.xsd 
    http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-2.5.xsd"
	default-autowire="byName" 
	default-lazy-init="false">

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="successUrl" value="/main.do" />
		<property name="unauthorizedUrl" value="/commons/403.jsp" />
		<property name="filters">
			<util:map>
				<!-- <entry key="authc">
					<bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter" />
				</entry>
				-->
				<entry key="anyRoles">
					<bean class="com.steven.framework.common.security.shiro.filter.AnyRolesAuthorizationFilter" />
				</entry>
				<entry key="urlPermit">
					<bean class="com.steven.framework.common.security.shiro.filter.UrlAuthorizationFilter" />
				</entry>
			</util:map>
		</property>
		
		<property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/index.jsp = user
				/main.do = user
				/main.jsp = user
				/script/** = anon
				/style/** = anon
				/image/** = anon
				/commons/** = anon
				/biz/*Type/**=authc,urlPermit
				/biz/BoreholeStrainUpload/** = authc,anyRoles[role_superAdmin;role_admin]
				/biz/EarthStress/downloadfile* = authc,anyRoles[role_member;role_admin;role_superAdmin]
				/support/authdownload* = authc,anyRoles[role_member;role_admin;role_superAdmin]
				/biz/** = anon
				/cms/CmsBoard/jsonSave.do = authc,urlPermit
				/cms/CmsContent/** = authc,urlPermit
				/cms/channel/** = anon
				/cms/content/** = anon
				/cms/Cms*/** = authc,urlPermit
				/static/** = anon
				/member/**/*.jsp = anon 
				/member/register*.* = anon 
				/member/forgetPassword.do = anon
				/member/sendResetPasswordEmail.* = anon
				/member/reset*.* = anon  
				/system/Module/** = authc,anyRoles[role_superAdmin;role_admin]
				/system/Region/** = authc,anyRoles[role_superAdmin;role_admin]
				/system/Audit/** = authc,anyRoles[role_superAdmin;role_admin]
				/system/User/** = authc,anyRoles[role_superAdmin;role_admin]
				/system/Role/** = authc,anyRoles[role_superAdmin;role_admin]
				/system/Group/** = authc,anyRoles[role_superAdmin;role_admin]
				/system/UserType/** = authc,anyRoles[role_superAdmin;role_admin]
				/system/Permission/** = authc,roles[role_superAdmin]
				/system/GlobalConfig/** = authc,roles[role_superAdmin]
				/system/** = authc,roles[role_superAdmin]
            </value>
		</property>
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--如果使用多个realm验证,则启用 'realms'属性配置	-->
		<property name="realm" ref="simpleRealm" />
		<!--	<property name="sessionMode" value="native"/>	   -->
		<property name="cacheManager" ref="shiroCacheManager"/>
	</bean>

	<!-- Post processor that automatically invokes init() and destroy() methods	-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    
    <!-- 自定义的realm实现 -->
	<bean id="simpleRealm" class="com.steven.framework.common.security.shiro.realm.SimpleRealm">
	  <property name="name" value="simpleRealm"/>
	</bean>
	<!-- 将securityManager注入静态SecurityUtils中 -->
	<bean	class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"	value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
    </bean>
    
    <!-- 缓存配置 -->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:     -->          
        <property name="cacheManager" ref="myCacheManager"/>  
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
        -->
    </bean>
</beans>
